// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for detecting unusual attendance patterns.
 *
 * - detectAbsencePatterns - Analyzes attendance data to identify unusual patterns like frequent absences or delays.
 * - DetectAbsencePatternsInput - The input type for the detectAbsencePatterns function.
 * - DetectAbsencePatternsOutput - The return type for the detectAbsencePatterns function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectAbsencePatternsInputSchema = z.object({
  attendanceData: z
    .string()
    .describe(
      'A string containing attendance records for employees.  The expected format is CSV with columns: employeeId, date, clockInTime, clockOutTime. Example: 123,2024-01-01,08:00,17:00'
    ),
  absenceThreshold: z
    .number()
    .default(3)
    .describe(
      'The number of absences or delays within a month that is considered unusual. Defaults to 3.'
    ),
});
export type DetectAbsencePatternsInput = z.infer<typeof DetectAbsencePatternsInputSchema>;

const DetectAbsencePatternsOutputSchema = z.object({
  unusualPatterns: z
    .string()
    .describe(
      'A description of any unusual attendance patterns detected, including specific employees and dates.  If no unusual patterns are detected, return an empty string.'
    ),
});
export type DetectAbsencePatternsOutput = z.infer<typeof DetectAbsencePatternsOutputSchema>;

export async function detectAbsencePatterns(
  input: DetectAbsencePatternsInput
): Promise<DetectAbsencePatternsOutput> {
  return detectAbsencePatternsFlow(input);
}

const detectAbsencePatternsPrompt = ai.definePrompt({
  name: 'detectAbsencePatternsPrompt',
  input: {schema: DetectAbsencePatternsInputSchema},
  output: {schema: DetectAbsencePatternsOutputSchema},
  prompt: `You are an AI assistant that analyzes employee attendance data to identify unusual patterns.

  Analyze the following attendance data and detect any unusual patterns, such as frequent absences or delays, exceeding the specified absence threshold.
  Absence Threshold: {{absenceThreshold}}

  Attendance Data:
  {{attendanceData}}

  If unusual patterns are detected, provide a detailed description including employee IDs and dates. If no such patterns are found, respond with an empty string.
  Ensure the response is concise and informative.
  `,
});

const detectAbsencePatternsFlow = ai.defineFlow(
  {
    name: 'detectAbsencePatternsFlow',
    inputSchema: DetectAbsencePatternsInputSchema,
    outputSchema: DetectAbsencePatternsOutputSchema,
  },
  async input => {
    const {output} = await detectAbsencePatternsPrompt(input);
    return output!;
  }
);
